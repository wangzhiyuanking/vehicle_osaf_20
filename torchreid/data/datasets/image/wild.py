# from __future__ import division, print_function, absolute_import
# import glob
# import numpy as np
# import os.path as osp
#
# from torchreid.utils import read_json, write_json
#
# from ..dataset import ImageDataset


# class VIPeR(ImageDataset):
#     """VIPeR.
#
#     Reference:
#         Gray et al. Evaluating appearance models for recognition, reacquisition, and tracking. PETS 2007.
#
#     URL: `<https://vision.soe.ucsc.edu/node/178>`_
#
#     Dataset statistics:
#         - identities: 632.
#         - images: 632 x 2 = 1264.
#         - cameras: 2.
#     """
#     dataset_dir = 'VeRi-Wild'
#     dataset_url = None
#
#     def __init__(self, root='', **kwargs):
#         self.root = osp.abspath(osp.expanduser(root))
#         self.dataset_dir = osp.join(self.root, self.dataset_dir)
#
#         self.train_dir = osp.join(self.dataset_dir, 'train_images')
#         self.query_dir = osp.join(self.dataset_dir, 'query3000_images')
#         self.gallery_dir = osp.join(self.dataset_dir, 'test3000_images')
#
#         required_files = [
#             self.dataset_dir, self.train_dir, self.query_dir, self.gallery_dir
#         ]
#         self.check_before_run(required_files)
#
#         train = self.process_dir(self.train_dir, relabel=True)
#         query = self.process_dir(self.query_dir, relabel=False)
#         gallery = self.process_dir(self.gallery_dir, relabel=False)
#
#         super(VIPeR, self).__init__(train, query, gallery, **kwargs)
#
#     def process_dir(self, dir_path, relabel=False):
#         print("=> VeRi-776 loaded")
#         img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
#         pattern = re.compile(r'([-\d]+)_c(\d+)')
#
#         pid_container = set()
#         for img_path in img_paths:
#             pid, _ = map(int, pattern.search(img_path).groups())
#             if pid == -1: continue  # junk images are just ignored
#             pid_container.add(pid)
#         pid2label = {pid: label for label, pid in enumerate(pid_container)}
#
#         data = []
#         for img_path in img_paths:
#             pid, camid = map(int, pattern.search(img_path).groups())
#             if pid == -1: continue  # junk images are just ignored
#             # assert 0 <= pid <= 776  # pid == 0 means background
#             # assert 1 <= camid <= 20
#             camid -= 1  # index starts from 0
#             if relabel: pid = pid2label[pid]
#             data.append((img_path, pid, camid))
#         # print('data',data)
#         return data

from __future__ import division, print_function, absolute_import
import re
import glob
import os.path as osp

from ..dataset import ImageDataset


class Wild(ImageDataset):
    """DukeMTMC-reID.

    Reference:
        - Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
        - Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.

    URL: `<https://github.com/layumi/DukeMTMC-reID_evaluation>`_

    Dataset statistics:
        - identities: 1404 (train + query).
        - images:16522 (train) + 2228 (query) + 17661 (gallery).
        - cameras: 8.
    """
    dataset_dir = 'VeRi-Wild'
    dataset_url = None

    def __init__(self, root='', **kwargs):
        self.root = osp.abspath(osp.expanduser(root))
        self.dataset_dir = osp.join(self.root, self.dataset_dir)


        self.train_dir = osp.join(self.dataset_dir, 'train_images')
        self.query_dir = osp.join(self.dataset_dir, 'query3000_images')
        self.gallery_dir = osp.join(self.dataset_dir, 'test3000_images')

        required_files = [
            self.dataset_dir, self.train_dir, self.query_dir, self.gallery_dir
        ]
        self.check_before_run(required_files)

        train = self.process_dir(self.train_dir, relabel=True)
        query = self.process_dir(self.query_dir, relabel=False)
        gallery = self.process_dir(self.gallery_dir, relabel=False)

        super(Wild, self).__init__(train, query, gallery, **kwargs)

    def process_dir(self, dir_path, relabel=False):
        print("=> VeRi-wild loaded")
        img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
        pattern = re.compile(r'([-\d]+)_c(\d+)')

        pid_container = set()
        for img_path in img_paths:
            pid, _ = map(int, pattern.search(img_path).groups())
            if pid == -1: continue  # junk images are just ignored
            pid_container.add(pid)
        pid2label = {pid: label for label, pid in enumerate(pid_container)}

        data = []
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            if pid == -1: continue  # junk images are just ignored
            # assert 0 <= pid <= 776  # pid == 0 means background
            # assert 1 <= camid <= 20
            camid -= 1  # index starts from 0
            if relabel: pid = pid2label[pid]
            data.append((img_path, pid, camid))
        # print('data',data)
        return data


    # def __init__(self, root='', **kwargs):
    #     self.root = osp.abspath(osp.expanduser(root))
    #     self.dataset_dir = osp.join(self.root, self.dataset_dir)
    #
    #     # self.train_dir = osp.join(self.dataset_dir, 'train_images')
    #     # # 小数据集
    #     # # self.query_dir = osp.join(self.dataset_dir, 'query3000_images')
    #     # # self.gallery_dir = osp.join(self.dataset_dir, 'test3000_images')
    #     # # 中数据集
    #     # self.query_dir = osp.join(self.dataset_dir, 'query5000_images')
    #     # self.gallery_dir = osp.join(self.dataset_dir, 'test5000_images')
    #     # 大数据集
    #     # self.query_dir = osp.join(self.dataset_dir, 'query3000_images')
    #     # self.gallery_dir = osp.join(self.dataset_dir, 'test3000_images')
    #
    #     self.image_dir = osp.join(root, self.dataset_dir, 'images')
    #     self.train_list = osp.join(root, self.dataset_dir, 'train_test_split/train_list.txt')
    #
    #     self.query_list = osp.join(root, self.dataset_dir, 'train_test_split/test_5000_query.txt')
    #     self.gallery_list = osp.join(root, self.dataset_dir, 'train_test_split/test_5000.txt')
    #     self.vehicle_info = osp.join(root, self.dataset_dir, 'train_test_split/vehicle_info.txt')
    #     required_files = [
    #         self.image_dir,
    #         self.train_list,
    #         self.query_list,
    #         self.gallery_list,
    #         self.vehicle_info
    #     ]
    #     print('checking00000000000000000000')
    #     self.check_before_run(required_files)
    #     query = self._process_dir(self.query_list, relabel=False)
    #     gallery = self._process_dir(self.gallery_list, relabel=False)
    #     train = self._process_dir(self.train_list, relabel=True)
    #
    #     super(VIPeR, self).__init__(train, query, gallery, **kwargs)
    #
    # def _process_dir(self, img_list, relabel=False):
    #
    #     vid_container = set()
    #     img_list_lines = open(img_list, 'r').readlines()
    #     for idx, line in enumerate(img_list_lines):
    #         line = line.strip()
    #         vid = line.split('/')[0]
    #         vid_container.add(vid)
    #     vid2label = {vid: label for label, vid in enumerate(vid_container)}
    #
    #     dataset = []
    #     for idx, line in enumerate(img_list_lines):
    #         # if idx < 10:
    #         line = line.strip()
    #         vid = line.split('/')[0]
    #         imgid = line.split('/')[1]
    #         if relabel: vid = vid2label[vid]
    #         dataset.append((self.imgid2imgpath[imgid], int(vid), int(self.imgid2camid[imgid])))
    #
    #     # print(dataset)
    #     # random.shuffle(dataset)
    #     assert len(dataset) == len(img_list_lines)
    #     #         if relabel == True:
    #     #             return dataset[:len(dataset)//4]
    #     return dataset
# class VeRi(ImageDataset):
#     """DukeMTMC-reID.
#
#     Reference:
#         - Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
#         - Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.
#
#     URL: `<https://github.com/layumi/DukeMTMC-reID_evaluation>`_
#
#     Dataset statistics:
#         - identities: 1404 (train + query).
#         - images:16522 (train) + 2228 (query) + 17661 (gallery).
#         - cameras: 8.
#     """
#     dataset_dir = 'VeRi'
#     dataset_url = None
#
#     def __init__(self, root='', **kwargs):
#         self.root = osp.abspath(osp.expanduser(root))
#         self.dataset_dir = osp.join(self.root, self.dataset_dir)
#
#
#         self.train_dir = osp.join(self.dataset_dir, 'image_train')
#         self.query_dir = osp.join(self.dataset_dir, 'image_query')
#         self.gallery_dir = osp.join(self.dataset_dir, 'image_test')
#
#         required_files = [
#             self.dataset_dir, self.train_dir, self.query_dir, self.gallery_dir
#         ]
#         self.check_before_run(required_files)
#
#         train = self.process_dir(self.train_dir, relabel=True)
#         query = self.process_dir(self.query_dir, relabel=False)
#         gallery = self.process_dir(self.gallery_dir, relabel=False)
#
#         super(VeRi, self).__init__(train, query, gallery, **kwargs)
#
#     def process_dir(self, dir_path, relabel=False):
#         print("=> VeRi-776 loaded")
#         img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
#         pattern = re.compile(r'([-\d]+)_c(\d+)')
#
#         pid_container = set()
#         for img_path in img_paths:
#             pid, _ = map(int, pattern.search(img_path).groups())
#             if pid == -1: continue  # junk images are just ignored
#             pid_container.add(pid)
#         pid2label = {pid: label for label, pid in enumerate(pid_container)}
#
#         data = []
#         for img_path in img_paths:
#             pid, camid = map(int, pattern.search(img_path).groups())
#             if pid == -1: continue  # junk images are just ignored
#             assert 0 <= pid <= 776  # pid == 0 means background
#             assert 1 <= camid <= 20
#             camid -= 1  # index starts from 0
#             if relabel: pid = pid2label[pid]
#             data.append((img_path, pid, camid))
#         # print('data',data)
#         return data
